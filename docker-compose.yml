version: "3"

x-logging: &default-logging
  logging:
    driver: json-file
    options:
      max-size: 100m

services:
  peercode_server:
    image: peercode_server
    container_name: peercode_server
    restart: always
    build:
      context: ./backend/server
      dockerfile: Dockerfile
    command: bash run.sh
    ports:
      - 5000:5000
    environment:
      MONGO_PEERCODE_HOST_NAME: ${MONGO_PEERCODE_HOST_NAME}
      MONGO_PEERCODE_DATABASE_NAME: ${MONGO_PEERCODE_DATABASE_NAME}
      MONGO_PEERCODE_DATABASE_USER: ${MONGO_PEERCODE_DATABASE_USER}
      MONGO_PEERCODE_DATABASE_PASSWORD: ${MONGO_PEERCODE_DATABASE_PASSWORD}
      KAFKA_SERVER_NAME: ${KAFKA_SERVER_NAME}
      KAFKA_TOPICS: ${KAFKA_TOPICS}
      KAFKA_TOPIC_QUESTION_SERVICE: ${KAFKA_TOPIC_QUESTION_SERVICE}
      KAFKA_TOPIC_QUESTION_BANK: ${KAFKA_TOPIC_QUESTION_BANK}
      KAFKA_TOPIC_QUESTION_OF_THE_DAY: ${KAFKA_TOPIC_QUESTION_OF_THE_DAY}
      KAFKA_GROUP_SERVER: ${KAFKA_GROUP_SERVER}
      QUESTION_SERVICE_URL: ${QUESTION_SERVICE_URL}
      JUDGE_SERVICE_URL: ${JUDGE_SERVICE_URL}
      USER_SERVICE_URL: ${USER_SERVICE_URL}
      SERVER_PORT: ${SERVER_PORT}
    networks:
      - network
  peercode_question_service:
    image: peercode_question_service
    container_name: peercode_question_service
    restart: always
    build:
      context: ./backend/question_service
      dockerfile: Dockerfile
    command: bash run.sh
    ports:
      - 5001:5001
    depends_on:
      - peercode_kafka
      - peercode_server
    environment:
      MONGO_PEERCODE_HOST_NAME: ${MONGO_PEERCODE_HOST_NAME}
      MONGO_PEERCODE_DATABASE_NAME: ${MONGO_PEERCODE_DATABASE_NAME}
      MONGO_PEERCODE_DATABASE_USER: ${MONGO_PEERCODE_DATABASE_USER}
      MONGO_PEERCODE_DATABASE_PASSWORD: ${MONGO_PEERCODE_DATABASE_PASSWORD}
      KAFKA_SERVER_NAME: ${KAFKA_SERVER_NAME}
      KAFKA_TOPICS: ${KAFKA_TOPICS}
      KAFKA_TOPIC_QUESTION_SERVICE: ${KAFKA_TOPIC_QUESTION_SERVICE}
      KAFKA_TOPIC_QUESTION_BANK: ${KAFKA_TOPIC_QUESTION_BANK}
      KAFKA_TOPIC_QUESTION_OF_THE_DAY: ${KAFKA_TOPIC_QUESTION_OF_THE_DAY}
      KAFKA_GROUP_QUESTION_SERVICE: ${KAFKA_GROUP_QUESTION_SERVICE}
    networks:
      - network
  peercode_leetcode_service:
    image: peercode_leetcode_service
    container_name: peercode_leetcode_service
    restart: always
    build:
      context: ./backend/leetcode_service
      dockerfile: Dockerfile
    command: bash run.sh
    depends_on:
      - peercode_kafka
      - peercode_server
    environment:
      MONGO_PEERCODE_HOST_NAME: ${MONGO_PEERCODE_HOST_NAME}
      MONGO_PEERCODE_DATABASE_NAME: ${MONGO_PEERCODE_DATABASE_NAME}
      MONGO_PEERCODE_DATABASE_USER: ${MONGO_PEERCODE_DATABASE_USER}
      MONGO_PEERCODE_DATABASE_PASSWORD: ${MONGO_PEERCODE_DATABASE_PASSWORD}
      KAFKA_SERVER_NAME: ${KAFKA_SERVER_NAME}
      KAFKA_TOPICS: ${KAFKA_TOPICS}
      KAFKA_TOPIC_QUESTION_SERVICE: ${KAFKA_TOPIC_QUESTION_SERVICE}
      KAFKA_TOPIC_QUESTION_BANK: ${KAFKA_TOPIC_QUESTION_BANK}
      KAFKA_TOPIC_QUESTION_OF_THE_DAY: ${KAFKA_TOPIC_QUESTION_OF_THE_DAY}
      KAFKA_GROUP_LEETCODE_SERVICE: ${KAFKA_GROUP_LEETCODE_SERVICE}
      LEETCODE_FETCH_LIMIT: ${LEETCODE_FETCH_LIMIT}
    networks:
      - network
  peercode_match_service:
    image: peercode_match_service
    container_name: peercode_match_service
    restart: always
    build:
      context: ./backend/match_service
      dockerfile: Dockerfile
    command: bash run.sh
    ports:
      - 5002:5002
    # depends_on:
    environment:
      MATCH_SERVICE_PORT: ${MATCH_SERVICE_PORT}
      REACT_APP_URL: ${REACT_APP_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
      MATCH_TIMEOUT: ${MATCH_TIMEOUT}

    networks:
      - network
  peercode_user_service:
    image: peercode_user_service
    container_name: peercode_user_service
    restart: always
    build:
      context: ./backend/user_service
      dockerfile: Dockerfile
    command: bash run.sh
    ports:
      - 5003:5003
    # depends_on:
    # environment:
    networks:
      - network

  peercode_react:
    image: peercode_react
    container_name: peercode_react
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm start
    ports:
      - 3000:3000
    environment:
      REACT_APP_API_SERVER: ${API_GATEWAY_URL}
      REACT_APP_MATCHMAKING_TIMEOUT: ${REACT_APP_MATCHMAKING_TIMEOUT}
    # volumes:
    depends_on:
      - peercode_server
    networks:
      - network

  peercode_kafka:
    image: confluentinc/cp-kafka:7.0.0
    container_name: peercode_kafka
    ports:
      - "9092:9092"
      - "19092:19092"
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "peercode_zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://peercode_kafka:9092,PLAINTEXT_INTERNAL://broker:29092,PLAINTEXT_HOST://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - peercode_zookeeper
    networks:
      - network

  peercode_zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    container_name: peercode_zookeeper
    ports:
      - "2181:2181"
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - network
  peercode_mongo:
    image: mongo:6
    container_name: peercode_mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_PEERCODE_DATABASE_NAME: ${MONGO_PEERCODE_DATABASE_NAME}
      MONGO_PEERCODE_DATABASE_USER: ${MONGO_PEERCODE_DATABASE_USER}
      MONGO_PEERCODE_DATABASE_PASSWORD: ${MONGO_PEERCODE_DATABASE_PASSWORD}
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - network
  peercode_mongo_express:
    image: mongo-express:1.0.0-alpha
    container_name: peercode_mongo_express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@peercode_mongo:27017/
    depends_on:
      - peercode_mongo
    networks:
      - network

  judge0_service:
    image: judge0/judge0:1.13.0
    volumes:
      - ./judge0.conf:/judge0.conf:ro
    ports:
      - "2358:2358"
    privileged: true
    <<: *default-logging
    restart: always
    networks:
      - network

  workers:
    image: judge0/judge0:1.13.0
    command: ["./scripts/workers"]
    volumes:
      - ./judge0.conf:/judge0.conf:ro
    privileged: true
    <<: *default-logging
    restart: always
    networks:
      - network

  judge0_db:
    image: postgres:13.0
    env_file: judge0.conf
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    <<: *default-logging
    restart: always
    networks:
      - network

  judge0_redis:
    image: redis:6.0
    command:
      [
        "bash",
        "-c",
        'docker-entrypoint.sh --appendonly yes --requirepass "$$REDIS_PASSWORD"',
      ]
    env_file: judge0.conf
    volumes:
      - redis-data:/data
    <<: *default-logging
    restart: always
    networks:
      - network

networks:
  network:

volumes:
  postgres-data:
  redis-data:
